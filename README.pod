
=begin html

<h1> TinyTimer - A better PHP microtimer class </h1>
<br />
<br />
PHP event timing has never been simpler. Using TinyTimer you can easily start, stop, and even create multiple timers at once. The trick to TinyTimers flexibility is in method chaining and two factory functions. 
<br />
<br />
<b>Create a new timer</b>:
<br />
<blockquote>
new TinyTimer( boolean $running* );
</blockquote>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*Note: $running is optional & defaults to true.
<br />
<br />
<br />	
<b>Create a running timer</b>:

=end html

	$time = new TinyTimer();
	
=begin html

<b>Create a stopped timer</b>: 

=end html

	$time = new TinyTimer(false);

=begin html

<br />
<br />
<b>To get the time count</b>:
<br />
<blockquote>
A) Simply echo the TinyTimer (implicitly using overwritten __toString() function). <br />
B) Or use getTime() function. <br />
</blockquote>
<br />

=end html

	echo "Count: $time";
	$count = $time->getTime();
	
=begin html

<b>Class Methods</b>:

<br />

<blockquote>
	start() - Start the timer. <br />
	stop() - Stop the timer. <br />
	restart() - Restart timing by resetting counter. <br />
	clear() - Stop timing and clear counter. <br />
	getTime() - Return the timing in microseconds. <br />
	precision(int $aNumber ) - Set float precision. <br />
	branch(string 'name', boolean $running* ) - Create a new stopped timer and return parent. <br />
	trunk(string 'name', boolean $running* ) - Create and return a new stopped timer. <br />
</blockquote>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*Note: $running is optional & defaults to false.
<br />
<br />

<b>Simple Example</b>:

=end html

	$time = new TinyTimer();	
	sleep(1);
	$time->stop();
	sleep(2);
	echo "time should be 1: $time";
	
You can create sub timers as properties of a parent timer using branch() and trunk(). Using trunk('name') will return the name property for chaining. Using these functions you can initialize a global timer and many sub timers at once. 

=begin html

<b>Branch and Trunk Example</b>:

=end html

	$globalTimer = new newTinyTimer()->trunk('appStart')->branch('eventA')->branch('eventB');

...would create 4 timers.

=begin html

1)	$globalTimer <br />
2)	$globalTimer->appStart <br />
3)	$globalTimer->appStart->eventA <br />
4)	$globalTimer->appStart->eventB <br />

=end html
